@using System.Globalization
@using GLTV.Extensions
@using GLTV.Models.Objects
@model GLTV.Models.TvItemEditViewModel

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>TvItem Edit</h2>

<hr />
<div class="row">
    <form asp-action="Edit" id="editTvItemForm" method="post" enctype="multipart/form-data">
        <div class="col-md-4">
            <div asp-validation-summary="All" class="text-danger"></div>
            @Html.HiddenFor(model => model.TvItem.ID)
            <div class="form-group">
                <label asp-for="TvItem.Author" class="control-label"></label>
                <input asp-for="TvItem.Author" class="form-control" readonly />
            </div>
            <div class="form-group">
                <label asp-for="TvItem.TimeInserted" class="control-label"></label>
                <input asp-for="TvItem.TimeInserted" class="form-control" readonly />
            </div>
            <div class="form-group">
                <label asp-for="TvItem.Type" class="control-label"></label>
                <input asp-for="TvItem.Type" class="form-control" readonly />
            </div>
            <div class="form-group">
                <label asp-for="TvItem.Title" class="control-label"></label>
                <textarea asp-for="TvItem.Title" class="form-control nonresizable"></textarea>
                <span asp-validation-for="TvItem.Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TvItem.StartTime" class="control-label"></label>
                <div class='input-group date' id='startTimeInput'>
                    <input asp-for="TvItem.StartTime" class="form-control" />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
                <span asp-validation-for="TvItem.StartTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TvItem.EndTime" class="control-label"></label>
                <div class='input-group date' id='endTimeInput'>
                    <input asp-for="TvItem.EndTime" class="form-control" />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
                <span asp-validation-for="TvItem.EndTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TvItem.Duration" class="control-label"></label>
                @if (Model.TvItem.Type == TvItemType.Video)
                {
                    <div>
                        <input id="durationInput" asp-for="TvItem.Duration" type="text"
                               data-slider-min="3" 
                               data-slider-max="@(Model.TvItem.Duration)" 
                               data-slider-step="1" 
                               data-slider-enabled="false" 
                               data-slider-value="@(Model.TvItem.Duration)" />
                    </div>
                    <span id="durationInputCurrentSliderValLabel">Seconds: <span id="durationInputSliderVal">@(Model.TvItem.Duration)</span></span>
                }
                else
                {
                    <div>
                        <input id="durationInput" asp-for="TvItem.Duration" type="text"
                               data-slider-min="3" 
                               data-slider-max="120" 
                               data-slider-step="1" 
                               data-slider-value="@(Model.TvItem.Duration)" />
                    </div>
                    <span id="durationInputCurrentSliderValLabel">Seconds: <span id="durationInputSliderVal">@(Model.TvItem.Duration)</span></span>
                }
            </div>
            <div class="form-group" id="locationsGroup">
                <label asp-for="LocationCheckboxes" class="control-label"></label>
                <div class="checkbox">
                    <label>
                        <input asp-for="LocationCheckboxes.LocationKosice" class="location-checkbox" />
                        <span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span>
                        Kosice
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        <input asp-for="LocationCheckboxes.LocationBanskaBystrica" class="location-checkbox" />
                        <span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span>
                        Banska Bystrica
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        <input asp-for="LocationCheckboxes.LocationZilina" class="location-checkbox" />
                        <span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span>
                        Zilina
                    </label>
                </div>
                <span asp-validation-for="LocationCheckboxes" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-12">
            <div class="form-group">
                <input type="submit" value="Update" class="btn btn-success" />
            </div>
        </div>
    </form>
</div>

<h4>Files</h4>
@if (Model.TvItem.Type != TvItemType.Video)
{
    <div id="blueimp-gallery" class="blueimp-gallery blueimp-gallery-controls">
        <div class="slides"></div>
        <h3 class="title"></h3>
        <a class="prev">‹</a>
        <a class="next">›</a>
        <a class="close">×</a>
        <a class="play-pause"></a>
        <ol class="indicator"></ol>
    </div>
    <div id="links" style="padding-top: 0px;">
        @foreach (TvItemFile file in Model.TvItem.Files)
        {
            <div class="image-block">
                <a href="@file.Url" title="@file.FileName">
                    <img src="@file.Url" alt="@file.FileName" width="200">
                </a>
                <p>
                    Size: @Utils.GetFileSize(file)<br />
                </p>
                @if (Model.TvItem.Files.Count > 1)
                {
                    <form asp-controller="TvItems" asp-action="DeleteFile" asp-route-id="@file.ID" method="post">
                        <button class="btn btn-danger btn-sm">Delete</button>
                    </form>
                }
            </div>
        }
    </div>
    <script>
        $(function () {
            $('#links img').on('click',
                function (event) {
                    event = event || window.event;
                    var target = event.target || event.srcElement,
                        link = target.src ? target.parentNode : target,
                        options = { index: link, event: event },
                        links = $('#links a');
                    blueimp.Gallery(links, options);
                });
        });
    </script>
}
else
{
    foreach (TvItemFile file in Model.TvItem.Files)
    {
        <video width="640" height="auto" controls>
            <source src="@file.Url" type="video/mp4">
            <source src="@file.Url" type="video/mkv">
            Your browser does not support the video tag.
        </video>
    }
}
@{
    string buttonText = "Change Video";
    string accept = ".mp4,.mkv";
    string allowMultiple = "";
    switch (Model.TvItem.Type)
    {
        case TvItemType.Video:
            buttonText = "Change Video";
            accept = ".mp4,.mkv";
            break;
        case TvItemType.Gallery:
            buttonText = "Add Files";
            accept = ".jpg,.jpeg,.png";
            allowMultiple = "multiple";
            break;
        case TvItemType.Image:
            buttonText = "Change Image";
            accept = ".jpg,.jpeg,.png";
            break;
    }
    <form asp-controller="TvItems" asp-action="AddFiles" asp-route-id="@Model.TvItem.ID" method="post" enctype="multipart/form-data" id="addFilesForm" style="padding-top: 20px;">
        <div class="form-group" id="fileInputGroup" style="">
            <input id="durationInput2" type="text" name="duration" class="hidden" value="0" />
            <input id="fileInput" type="file" name="files" class="file" accept="@accept" @allowMultiple
                   data-show-upload="false" data-show-caption="true" data-msg-placeholder="Select {files} for upload...">
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <input type="submit" value="@buttonText" class="btn btn-success" />
        </div>
    </form>
}

<div style="padding-top: 50px;">
    <a asp-action="Index">Back to List</a>
</div>

<script type="text/javascript">
    var totalFileSize = 0;

    $(function () {
        var startTimeDp = $('#startTimeInput').datetimepicker({
            locale: 'sk',
            useCurrent: false,
            maxDate: new Date('@(Model.TvItem.EndTime.ToString("o", CultureInfo.InvariantCulture))')
        });
        var endTimeDp = $('#endTimeInput').datetimepicker({
            useCurrent: false, //Important! See issue #1075
            locale: 'sk',
            minDate: new Date('@(Model.TvItem.StartTime.ToString("o", CultureInfo.InvariantCulture))')
        });
        startTimeDp.on("dp.change",
            function(e) {
                endTimeDp.data("DateTimePicker").minDate(e.date);
            });
        endTimeDp.on("dp.change",
            function(e) {
                startTimeDp.data("DateTimePicker").maxDate(e.date);
            });
        @*endTimeDp.data("DateTimePicker").minDate(new Date('@(Model.TvItem.StartTime.ToString("o", CultureInfo.InvariantCulture))'));
        startTimeDp.data("DateTimePicker").maxDate(new Date('@(Model.TvItem.EndTime.ToString("o", CultureInfo.InvariantCulture))'));*@

        $('input.location-checkbox').change(function () {
            validateLocationCheckboxes();
        });

        function validateLocationCheckboxes() {
            var checked = $('#locationsGroup').find('input[type=checkbox]:checked').length;
            var span = $('#locationsGroup').find('span.text-danger');

            if (checked == 0) {
                span.removeClass('field-validation-valid');
                span.addClass('field-validation-error');
                span.text('At least one location must be checked.');
                return false;
            } else {
                span.addClass('field-validation-valid');
                span.removeClass('field-validation-error');
                span.text('');
                return true;
            }
        }

        $('#editTvItemForm').submit(function (ev) {
            ev.preventDefault(); // to stop the form from submitting
            /* Validations go here */
            if (!validateLocationCheckboxes()) {
                $.unblockUI();
                return false;
            }

            this.submit(); // If all the validations succeeded
        });

        $("#durationInput").slider();
        $("#durationInput").on("change", function (slideEvt) {
            $("#durationInputSliderVal").text(slideEvt.value.newValue);
        });

        $("#fileInput").fileinput({
            minFileSize: 1
        });

        function validateFileInput() {
            var span = $('#fileInputGroup').find('span.text-danger');

            if (totalFileSize > @Constants.MULTIPART_BODY_LENGTH_LIMIT) {
                span.removeClass('field-validation-valid');
                span.addClass('field-validation-error');
                span.text('Total file size must not be greater than @Constants.MULTIPART_BODY_LENGTH_LIMIT bytes (@Utils.GetFileSize(Constants.MULTIPART_BODY_LENGTH_LIMIT)).');
                return false;
            } else if (totalFileSize == 0) {
                span.removeClass('field-validation-valid');
                span.addClass('field-validation-error');
                span.text('At least one file is required.');
                return false;
            } else {
                span.addClass('field-validation-valid');
                span.removeClass('field-validation-error');
                span.text('');
                return true;
            }
        }

        window.URL = window.URL || window.webkitURL;

        $("#fileInput").change(function() {
            var nBytes = 0,
                oFiles = document.getElementById("fileInput").files,
                nFiles = oFiles.length;
            for (var nFileId = 0; nFileId < nFiles; nFileId++) {
                nBytes += oFiles[nFileId].size;
            }

            totalFileSize = nBytes;
            if (validateFileInput()) {
                @if (Model.TvItem.Type == TvItemType.Video)
                {
                    <text>
                        var files = document.getElementById("fileInput").files;
                        var video = document.createElement('video');
                        video.preload = 'metadata';

                        video.onloadedmetadata = function() {
                            window.URL.revokeObjectURL(video.src);
                            var duration = parseInt(video.duration);
                            $("#durationInput").slider('setAttribute', 'max', duration).slider('setValue', duration, true, true);
                            $("#durationInput2").val(duration);
                        }

                        video.src = URL.createObjectURL(files[0]);
                    </text>
                }
            }
        });

        $('#addFilesForm').submit(function (ev) {
            ev.preventDefault(); // to stop the form from submitting
            /* Validations go here */
            if (!validateFileInput()) {
                $.unblockUI();
                return false;
            }

            this.submit(); // If all the validations succeeded
        });



    });
</script>

